\documentclass[a4paper, twoside]{article}

%% Language and font encodings
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{xspace}
\usepackage{enumitem}
\usepackage{longtable}

%% Sets page size and margins
\usepackage[a4paper,top=3cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]{geometry}

%% Useful packages
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage[colorlinks=true, allcolors=blue]{hyperref}
\usepackage{listings}
\usepackage{xcolor}

\colorlet{punct}{red!60!black}
\definecolor{background}{HTML}{EEEEEE}
\definecolor{delim}{RGB}{20,105,176}
\colorlet{numb}{magenta!60!black}

\lstdefinelanguage{json}{
    basicstyle=\normalfont\ttfamily,
    numbers=left,
    numberstyle=\scriptsize,
    stepnumber=1,
    numbersep=8pt,
    showstringspaces=false,
    breaklines=true,
    frame=lines,
    backgroundcolor=\color{background},
    literate=
     *{0}{{{\color{numb}0}}}{1}
      {1}{{{\color{numb}1}}}{1}
      {2}{{{\color{numb}2}}}{1}
      {3}{{{\color{numb}3}}}{1}
      {4}{{{\color{numb}4}}}{1}
      {5}{{{\color{numb}5}}}{1}
      {6}{{{\color{numb}6}}}{1}
      {7}{{{\color{numb}7}}}{1}
      {8}{{{\color{numb}8}}}{1}
      {9}{{{\color{numb}9}}}{1}
      {:}{{{\color{punct}{:}}}}{1}
      {,}{{{\color{punct}{,}}}}{1}
      {\{}{{{\color{delim}{\{}}}}{1}
      {\}}{{{\color{delim}{\}}}}}{1}
      {[}{{{\color{delim}{[}}}}{1}
      {]}{{{\color{delim}{]}}}}{1},
}
\usepackage{xcolor}
\usepackage{amsmath,amsfonts}

\usepackage[normalem]{ulem} % for \sout
\newcommand{\ra}{$\rightarrow$}
\newcommand{\ugh}[1]{\textcolor{red}{\uwave{#1}}} % please rephrase
\newcommand{\ins}[1]{\textcolor{orange}{#1}} % please insert
\newcommand{\del}[1]{\textcolor{red}{\sout{#1}}} % please delete
\newcommand{\chg}[2]{\textcolor{red}{\sout{#1}}{\ra}\textcolor{blue}{\uline{#2}}}

\definecolor{navyblue}{rgb}{0.0, 0.0, 0.5}
\definecolor{brightmaroon}{rgb}{0.76, 0.13, 0.28}
%%% Preamble
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{latexsym}
\usepackage{graphicx}


%%% 
%%% Definitions
%%%
\newcommand{\Fillin}[1]{\textcolor{red}{$<$#1$>$}}
\newcommand{\Optional}{\textcolor{gray}{\textsf(optional)}}
\newcommand{\angles}[1]{$\langle$#1$\rangle$}
\newcommand{\must}[1]{\textcolor{navyblue}{$\star$ #1}}
\newcommand{\note}[1]{\small\textsc{note: }\textit{#1}}
\newcommand{\should}[1]{\textcolor{plum}{$\Box$ #1}}
\newcommand{\std}[1]{\textcolor{brightmaroon}{ISO/IEC/IEEE~42010,~#1}}
\newcommand{\tbd}[1]{\noindent\textcolor{red}{\textbf{TBD: }{\textsf{#1}}}}
\newcommand{\working}[1]{\noindent\textcolor{cadetblue}{\textsf{#1}}}

\newcommand{\name}{Architecture in the space domain \xspace}

\graphicspath{ {./assets/} }

\title{Readme of the exam: Theory and Applications of Model-Driven Engineering}
% \author{John Smith}
% Update supervisor and other title stuff in title/title.tex

\setcounter{tocdepth}{3} % Includes subsubsections in ToC
\setcounter{secnumdepth}{3} % Enables numbering for subsubsections

\usepackage{float}
\usepackage{caption}

\renewcommand{\topfraction}{1.0}        % Allow floats to take full top
\renewcommand{\bottomfraction}{1.0}     % Allow floats to take full bottom
\renewcommand{\textfraction}{0.0}       % No minimum text required per page
\renewcommand{\floatpagefraction}{0.8}  % Allow float pages if they call â‰¥80%

\usepackage[font=small]{caption}

\usepackage{listings}
\usepackage{xcolor} % per colori opzionali

\lstset{
  breaklines=true,        % <-- va a capo automatico
  basicstyle=\ttfamily\small,
  columns=fullflexible,
  frame=single,
  backgroundcolor=\color{gray!10}
}

\begin{document}
\input{title/title.tex}

% \begin{abstract}
% Your abstract goes here
% \end{abstract}

% \renewcommand{\abstractname}{Acknowledgements}
% \begin{abstract}
% Thanks mum!
% \end{abstract}



\maketitle

\section*{Project: Theory and Applications of Model-Driven Engineering}

This project of Theory and Applications of Model-Driven Engineering (TAMDE) presents five case studies where the primary goal is to define source and target metamodels, create model instances, and execute model-to-model (M2M) transformations using the Epsilon Transformation Language (ETL). The project also involves model slicing and visualization using Picto. This document provides a detailed explanation of the case studies and a generalized step-by-step tutorial for setting up the environment and running the transformations in Eclipse.

\section{Case studies}
\subsection{First Case Study: Farmers to Market Transformation}

This case study focuses on transforming a detailed model of farmers and their produce into a simplified model representing products available at a market.

\subsubsection*{The Metamodels}

Two distinct metamodels are defined for this transformation, representing the source and target structures.

\begin{itemize}
    \item \textbf{Source Metamodel (A): \texttt{farmers.ecore}}. This metamodel captures information about individual farmers and the various fruits they cultivate.
    \begin{itemize}
        \item \texttt{FarmModel}: The root container for all farmers.
        \item \texttt{Farmer}: Represents a farmer with an \texttt{id}, \texttt{name}, \texttt{age}, and a list of fruits they own.
        \item \texttt{Fruit}: Represents a type of produce with a \texttt{name}, \texttt{amount}, \texttt{quality}, and \texttt{price}.
    \end{itemize}
    
    \item \textbf{Target Metamodel (B): \texttt{market.ecore}}. This metamodel provides a market-centric view. It represents a flattened list of products available for sale, abstracting away the individual farmer's inventory into a single market list.
    \begin{itemize}
        \item \texttt{Market}: The root container for all product selections.
        \item \texttt{Selection}: Represents a single product line for sale, containing its \texttt{name}, \texttt{quality}, \texttt{price}, \texttt{amount}, and the \texttt{farmer\_id} of the producer.
    \end{itemize}
\end{itemize}

\subsubsection*{Transformation Goal}

The transformation, defined in \texttt{farmer2market.etl}, reads an instance model conforming to \texttt{farmers.ecore} (i.e., a list of farmers and their fruits) and produces a new instance model conforming to \texttt{market.ecore}. The logic iterates through each farmer and each of their fruits, creating a corresponding \texttt{Selection} entry in the market model for every fruit.


\subsection{Second Case Study: Customer to Data Warehouse Transformation}

This case study focuses on transforming a transactional model of customer purchases into an aggregated, analytical model suitable for a data warehouse.

\subsubsection*{The Metamodels}

Two distinct metamodels are defined, representing the raw transactional data and the summarized analytical data.

\begin{itemize}
    \item \textbf{Source Metamodel (A): \texttt{customer.ecore}}. This metamodel captures detailed information about individual customers and their specific purchase histories.
    \begin{itemize}
        \item \texttt{CustomerModel}: The root container for all customers.
        \item \texttt{Customer}: Represents a customer with a \texttt{customer\_id}, \texttt{name}, \texttt{email}, \texttt{age}, and a list of their purchases.
        \item \texttt{Purchase}: Represents a single transaction with a \texttt{product} name, \texttt{quantity}, \texttt{price}, and \texttt{date}.
    \end{itemize}
    
    \item \textbf{Target Metamodel (B): \texttt{warehouse.ecore}}. This metamodel provides an aggregated, analytical view. It summarizes each customer's activity into a single ``fact'' record.
    \begin{itemize}
        \item \texttt{DataWarehouse}: The root container for all customer facts.
        \item \texttt{CustomerFact}: Represents a summarized view of a customer, containing their \texttt{customer\_id}, \texttt{name}, \texttt{email}, along with calculated fields like \texttt{total\_spent}, \texttt{total\_orders}, and the \texttt{last\_purchase\_date}.
    \end{itemize}
\end{itemize}

\subsubsection*{Transformation Goal}

The transformation, defined in \texttt{customer2warehouse.etl}, reads an instance model conforming to \texttt{customer.ecore} and produces a new instance model conforming to \texttt{warehouse.ecore}. The logic iterates through each customer and aggregates their purchase history by calculating the total money spent, counting the number of orders, and identifying the most recent purchase date. This creates a concise, analytical summary for each customer.





\section{Step-by-Step Tutorial}

Below is the workflow for creating metamodels, instance models, and running transformations using Eclipse and the Epsilon platform.

\subsection*{1. Project and Metamodel Setup}

\begin{enumerate}
    \item \textbf{Create Project}: In Eclipse, go to \texttt{File > New > Project...}. Select \texttt{General > Project} and give it a name (e.g., \texttt{CaseStudy1}).
    \item \textbf{Create Metamodel Folder}: Inside your new project, create a folder named \texttt{metamodel}.
    \item \textbf{Define Metamodels with Emfatic}:
    \begin{itemize}
        \item Inside the \texttt{metamodel} folder, create two new files with the \texttt{.emf} extension (e.g., \texttt{farmers.emf} and \texttt{market.emf}).
        \item Write the metamodel definitions in these files. Ensure the \texttt{@namespace} URI is unique for each metamodel.
    \end{itemize}
    \item \textbf{Generate Ecore Metamodels}:
    \begin{itemize}
        \item Right-click on each \texttt{.emf} file.
        \item Select \texttt{Epsilon > Generate Ecore from Emfatic}. This creates the corresponding \texttt{.ecore} files.
    \end{itemize}
    \item \textbf{Validate Metamodels}: Right-click on each generated \texttt{.ecore} file and select \texttt{Validate}.
\end{enumerate}

\subsection*{2. Creating an Instance Model}

\begin{enumerate}
    \item \textbf{Create Models Folder}: Create a new folder named \texttt{models}.
    \item \textbf{Define Model with Flexmi}:
    \begin{itemize}
        \item Create a new file with the \texttt{.flexmi} extension (e.g., \texttt{farmers\_large.flexmi}).
        \item Write the instance data. Reference the correct namespace URI from your source metamodel (e.g., \texttt{<?nsuri farm01?>}).
    \end{itemize}
    \item \textbf{Generate XMI Model}:
    \begin{itemize}
        \item Right-click the \texttt{.flexmi} file.
        \item Select \texttt{Generate XMI Model}. This creates an \texttt{.xmi} file.
    \end{itemize}
\end{enumerate}

\subsection*{3. ETL Transformation}

\begin{enumerate}
    \item \textbf{Create Transformation Folder}: Create a folder named \texttt{transformations}.
    \item \textbf{Create ETL File}: Create a file named \texttt{farmer2market.etl}.
    \item \textbf{Set Up Run Configuration}:
    \begin{itemize}
        \item Go to \texttt{Run > Run Configurations...}.
        \item Create a new configuration under \texttt{ETL Transformation}.
        \item Select your \texttt{.etl} file.
    \end{itemize}
    \item \textbf{Configure Source Model (Input)}:
    \begin{itemize}
        \item Add a model named (e.g., \texttt{farmers}).
        \item Select \texttt{EMF Model}.
        \item Select the \texttt{.xmi} file and the corresponding \texttt{.ecore} file.
        \item Check \texttt{Read on load}, uncheck \texttt{Store on disposal}.
    \end{itemize}
    \item \textbf{Configure Target Model (Output)}:
    \begin{itemize}
        \item Add another model (e.g., \texttt{market}).
        \item Select \texttt{EMF Model}.
        \item Specify a non-existent output file.
        \item Select the corresponding \texttt{.ecore} file.
        \item Uncheck \texttt{Read on load}, check \texttt{Store on disposal}.
    \end{itemize}
    \item \textbf{Run the Transformation}: Click \texttt{Apply} and then \texttt{Run}.
\end{enumerate}

\subsection*{4. Visualizing Metamodels with Picto}

\begin{enumerate}
    \item \textbf{Setup}:
    \begin{itemize}
        \item Create a \texttt{picto} folder.
        \item Copy the \texttt{.settings}, \texttt{picto} folder, and \texttt{.project} file from your Picto installation.
    \end{itemize}
    \item \textbf{Create Picto Configuration}:
    \begin{itemize}
        \item Create a file named \texttt{farmers.ecore.picto}.
        \item Paste the following configuration:
\begin{lstlisting}[language=XML]
<?nsuri picto?>
<picto format="plantuml" transformation="picto/ecore2plantuml/ecore2plantuml.egl">
</picto>
\end{lstlisting}
    \item Note: For \texttt{.model} files (e.g., \texttt{market.ecore.model}), use the special configuration of the .ecore.model file provided in the tutorial.
    \end{itemize}
    \item \textbf{Generate Diagram}: Right-click the \texttt{.picto} file and select \texttt{Picto > Generate diagram}.
\end{enumerate}

\subsection*{5. Slicing / Semantic Importance}





\newpage 

\bibliographystyle{apalike}
\bibliography{biblio}



\end{document}